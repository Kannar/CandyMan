function Breakable(properties)
{
	this.x = properties.x;
	this.y = properties.y;

	this.id = breakables.length;

	this.width = properties.width;
	this.height = properties.height || properties.width;

	this.colliders = [];

	this.sens;

	this.bricks = [];

	this.init = function()
	{
		//Set du sens
		if(this.width > this.height)
			this.sens = "horizontal";
		else
			this.sens = "vertical";

		//Init des colliders de "sécurité"		
		for(var i = 0; i < 2; i=i+1)
		{
			this.colliders.push(new Collider({	
				x: this.x,
				y: this.y,
				width: this.width,
				height: this.height,
				shape: "square",
				type: "static",
				category: categories.scene,
				mask: masks.scene,
				tag: {tag: "wall", obj: this},
				restitution: properties.restitution
			}));
		}

		//Init des briques
		var _nbBricks;	//Calcul du nombre de briques nécessaires
		if(this.sens == "horizontal")
		{
			_nbBricks = this.width/breakables_data[0].width;

			for(var i = 0; i < _nbBricks; i=i+1)
			{
				
			}
		}
		else if(this.sens == "vertical")
		{
			_nbBricks.height = this.height/breakables_data[1].height;

			for(var i = 0; i < _nbBricks; i=i+1)
			{

			}
		}
	}

	this.toDestroy = false;
	this.render = function()
	{
		for(var i=0; i<this.bricks.length; i=i+1)
		{
			this.bricks[i].render();
		}
	}

	this.update = function()
	{
		this.render();
		this.checkIfDestroyed();
	}

	this.checkPlayerSolidState = function()
	{
		if(player)
		{
			if(player.state.name == "solid")//Si le joueur est en état solide alors le mur est pas cassable
			{
				for(var i=0; i<this.colliders.length; i=i+1)
					this.colliders[i].GetBody().SetSensor(true);
			}
			else	//Sinon oui
			{
				for(var i=0; i<this.colliders.length; i=i+1)
					this.colliders[i].GetBody().SetSensor(false);
			}
		}
	}
/************************
	Collisions
************************/
	this.preCollide = function(who)
	{
		
	}

	this.onCollide = function(who)
	{
		
	}

	this.endCollide = function(who)
	{

	}

	this.postCollide = function(who)
	{

	}
/**********************/

	this.checkIfDestroyed = function()
	{
		if(this.toDestroy)
		{
			world.DestroyBody(this.collider.GetBody());
			breakables.splice(this.id, 1);
		}
	}
}

var Brick = function(params)
{
	this.x = properties.x;
	this.y = properties.y;
	this.width = properties.width;
	this.height = properties.height || properties.width;

	this.dataType = params.dataType;
	this.skin;

	this.collider = new Collider({	
		x: this.x,
		y: this.y,
		width: this.width,
		height: this.height,
		shape: "square",
		type: "dynamic",
		category: categories.breakable,
		mask: masks.breakable,
		tag: {tag: "breakable", obj: this},
		restitution: properties.restitution
	});

	this.update = function()
	{
		this.render();
	}

	this.render = function()
	{
		mainContext.fillStyle = "rgb(100, 100, 255)";
		mainContext.fillRect((this.x-(this.width))*30, (this.y-(this.height))*30, this.width*30*2, this.height*30*2);
	}

	/************************
		Collisions
	************************/
		this.preCollide = function(who)
		{
			
		}

		this.onCollide = function(who)
		{
			switch(who.tag)
			{
				case "player":
					if(player.state.name == "solid")
					{
						// this.toDestroy = true;
					}
				break;

				case "floor":
					//Animation dépop
				break;
			}
		}

		this.endCollide = function(who)
		{

		}

		this.postCollide = function(who)
		{

		}
	/**********************/	
}